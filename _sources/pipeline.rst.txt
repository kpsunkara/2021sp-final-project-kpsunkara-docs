Jenkins Pipeline component for pySpark apps===========================================To provide a consistent and repeatable build, test, scan, package and deployment pipeline for pySpark apps for distributed processing.Features---------* Orchestrates the build, package and deployment stages for Python + Spark (pySpark) apps* Performs sub module packaging for Python code into a distributable archive, which is used to serve up pySpark apps to Spark executors for distributed processing workloads* Organizes Python entry point module and the python distributable archive into one final deployable artifact through XLR* Packages necessary XLR install scripts for automated deployment of the final artifact into Bigdata/Cornerstone or a similar environment supporting spark workloads* Supports packaging of pySpark ML apps* Bundles multiple pipeline steps into one stage to promote consistent build, package and deployment process for pySpark apps * Hooks provide the ability to run custom actions between predefined stages * Implements a design pattern using Groovy Closures to promote an object oriented reuse of code across Global Vars/ Pipeline components.. image:: ../_static/pipeline.pngThe pipeline starts with checkout and triggers maven build, package and deploy goals using either `release`, `test` or `dev` profile tag. The effective profile tag takes on a value of either ``release`` or ``test`` by matching the name of the build branch with ``releaseBranches`` or ``testBranches`` parameters (see parameter list below), otherwise it defaults to ``dev``. The final artifact version identifier is set to either ``RELEASE``, if the branch name matches with ``releaseBranches``, otherwise it's set to ``SNAPSHOT``. This step also automates deploying the package through XLR. If sonarProfile details are provided, `sonarscanonly` is triggered.Parameters----------.. list-table::   :header-rows: 1   * - Parameter     - Description   * - testBranches     - depending on the branching model used by project team, provide one or more branch names from which integration test builds are created (optional). example: ['develop']; default: develop   * - releaseBranches     - depending on the branching model used by project team, provide one or more branch names from which release builds are created (optional). example: ['release','master']; default: ['release','master']   * - sonarProfile     - a parameterish-block or a map of details of project's sonarqube scan profile (optional). When present, user property is required. projectName and projectUrl properties are optional and default to details from the build branch. 'language', 'qualitygate' and 'sources' are optional and passed thro.   * - xlrProfile     - a parameterish-block or a map of project's XLR deployment details (optional). When present, all parameters are required. Note: To generate XLR subscription ID, refer: https://enterprise-confluence.acme.com/confluence/pages/viewpage.action?spaceKey=ECCS&title=XLR+-+API+details   * - slackProfile     - a parameterish-block or a map of team's slack channel details to send build status notifications. Note: To generate slaockToken, refer: https://enterprise-confluence.acme.com/confluence/display/GAF/CTO+Shared+Library#CTOSharedLibrary-IntegratingJenkinswithSlackforBuildNotifications   * - buildArgs     - maven build arguments (optional)   * - preBuild     - code block/hook to run before building the package(s)   * - postBuild     - code block/hook to run after building the package(s) and installed to Nexus   * - preDeploy     - code block/hook to run before submitting XLR deployment   * - postBuild     - code block/hook to run after submitting XLR deploymentSample Jenkinsfile------------------.. literalinclude:: ../../{{cookiecutter.project_name}}/Jenkinsfile  :language: groovy